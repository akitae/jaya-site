<?php

namespace UpjvBundle\Repository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use UpjvBundle\Entity\Utilisateur;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends \Doctrine\ORM\EntityRepository
{

    public function findUser ($email, $motDePasse) {
        $queryBuilder = $this->createQueryBuilder('e');
        $queryBuilder->where('e.email = :email')->setParameter('email', $email)
        ->andWhere('e.motDePasse = :motDePasse')->setParameter('motDePasse', $motDePasse);

        try {
            return $queryBuilder->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            return null;
        }

    }

    /**
     * Recherche les utilisateurs suivant un role précis.
     * @param $role
     * @return mixed
     */
    public function findByRole ($role) {
        $queryBuilder = $this->createQueryBuilder('e');
        $queryBuilder
            ->where('e.roles LIKE :roles')
            ->setParameter('roles', '%'.$role.'%')
            ->orderBy('e.nom');

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Recherche l'utilisateur par l'identifiant.
     * @param $username
     * @return mixed
     */
    public function findByUsername ($username) {
        $queryBuilder = $this->createQueryBuilder('e');
        $queryBuilder->where('e.username = :username')->setParameter('username', $username);

        try {
            return $queryBuilder->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return $queryBuilder->getQuery()->getResult()[0];
        }
    }

    /**
     * Rercherche l'utilisateur par l'adresse email.
     * @param $email
     * @return mixed
     */
    public function findUserByEmail ($email) {
        $queryBuilder = $this->createQueryBuilder('e');
        $queryBuilder->where('e.email = :email')->setParameter('email', $email);

        try {
            return $queryBuilder->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return $queryBuilder->getQuery()->getResult()[0];
        }
    }

    /**
     * Recherche l'utilisateur par le numéro étudiant.
     * @param $numeroEtudiant
     * @return mixed
     */
    public function findUserByNumeroEtudiant ($numeroEtudiant) {
        $queryBuilder = $this->createQueryBuilder('e');
        $queryBuilder->where('e.numeroEtudiant = :numeroEtudiant')->setParameter('numeroEtudiant', $numeroEtudiant);

        try {
            return $queryBuilder->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return $queryBuilder->getQuery()->getResult()[0];
        }
    }


    public function filterUserByArray($filtres){

        $queryBuilder = $this
            ->createQueryBuilder('q')
            ->select('DISTINCT(q.id),q.nom,q.prenom,p.nom as parcours')
            ->leftJoin('q.matieres','m')
            ->leftJoin('q.parcours','p')
            ->leftJoin('q.groupes', 'g')
            ->orderBy('q.nom')
        ;

        $queryBuilder->where('q.type = :type')->setParameter('type',Utilisateur::TYPE_ETUDIANT);
        if(isset($filtres['nom'])){
            $queryBuilder->andWhere('q.nom IN (:nom)')->setParameter('nom',$filtres['nom']);
        }

        if(isset($filtres['prenom'])){
            $queryBuilder->andWhere('q.prenom IN (:prenom)')->setParameter('prenom',$filtres['prenom']);
        }
        if(isset($filtres['parcours'])){
            $queryBuilder->andWhere('p.nom IN (:parcours)')->setParameter('parcours',$filtres['parcours']);
        }
        if(isset($filtres['matiere'])){
            foreach ($filtres['matiere'] as $matiere){
                $subString = explode(' - ', $matiere);
                $matieres[] = $subString[0];
            }
            $queryBuilder->andWhere('m.code IN (:matiere)')->setParameter('matiere',$matieres);
        }
        if(isset($filtres['groupe'])){
            $queryBuilder->andWhere('g.nom IN (:groupe)')->setParameter('groupe',$filtres['groupe']);
        }

        return $queryBuilder->getQuery()->getResult();
    }

}
